import { createSlice } from "@reduxjs/toolkit";
import { AnyAction } from "redux";
import { BankAction, BankActionType } from "../actions/bankactions";
import { RootState } from "../store";

// export const reducer = (state: number = 0, action: BankAction) => {
//   switch (action.type) {
//     case BankActionType.DEPOSIT:
//       return state + action.payload;

//     case BankActionType.WITHDRAW:
//       return state - action.payload;
//   }
// };
// Define a type for the slice state
interface CounterState {
  value: number;
}

// Define the initial state using that type
const initialState: CounterState = {
  value: 0,
};
export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: AnyAction) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;
export const selectCount = (state: RootState) => state.account.value;
